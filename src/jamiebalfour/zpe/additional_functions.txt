def _put(i, e, v = None):
  if type(i) == type({}):
    i[e] = v
  elif type(i) == type([]):
    i.append(e)
--
def list_swap_elements(l, a, b):
  tmp = l[a]
  l[a] = l[b]
  l[b] = tmp
  return l
--
def map_get_keys(m):
  return m.keys()
--
def throw_error(msg):
  #raise Exception(msg)
  print(msg)
--
def list_add_element(l, e):
  l.append(e)
  return l
--
def list_remove_element(l, e):
  l.pop(e)
  return l
--
def random_number(max, min):
  return random.randint(min, max)
--
def list_set_at_index(l, i, v):
  diff = i - len(l)
  if diff > 0:
    for i in range(0, diff + 1):
      l.append(None)
    l[len(l) - 1] = v
  l[i] = v
  return l
--
def typeOf(e):
  if isinstance(e, dict):
    return "MAP"
  else:
    return type(e)
--
def list_slice(l, offset, length=-1):
  if length == -1:
    return l[offset:]
  else:
    return l[offset:length]
--
def map_contains(m, e):
  if m is None or e is None or type(m) != type({}):
    return False
  return e in m
--
def string_get_length(s):
  return len(str(s))
--
def value(o):
  if isinstance(o, int):
    return int(o)
  elif isinstance(o, float):
    return float(o)
  elif isinstance(o, str):
    if str(o).isnumeric():
      if str(o).find(".") > -1:
        return float(o)
      else:
        return int(o)
  else:
    return 0
--
def string_get_substring(s, start, length):
  x = str(s)
  return x[start:length]
--
def string_to_lowercase(s):
  return s.lower()
--
def string_to_uppercase(s):
  return s.upper()
--
def string_contains(s, c):
  return s.find(c) > -1
--
def square_root(n):
  return math.sqrt(n)
--
def string_split(s, d):
  return s.split(d)
--